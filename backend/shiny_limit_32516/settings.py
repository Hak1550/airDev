"""
Django settings for shiny_limit_32516 project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import logging
from modules.manifest import get_modules

env = environ.Env()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

APP_BASE_URL = "https://advanced-image-robo-32-staging.botics.co/"
if env.str("PRODUCTION_ENV", False):
    APP_BASE_URL = 'https://advanced-image-robo-32516.botics.co/'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STRIPE_SECRET_KEY = env.str("STRIPE_SECRET_KEY", "sk_test_51LiHPBSD7O2aDqQ5aouGNui9wIq0QnFGqneKCWlEErnyOgqWNKQAjze5N7FJDSX1xo9IIkxGxZ0MGeF9CUEPyn99007ZlaXARI")
STRIPE_PUBLIC_KEY = env.str("STRIPE_PUBLIC_KEY", "pk_test_51LiHPBSD7O2aDqQ58uAbIN1PxXFsObdFSttAHFsa575Brkdl6Cnp3qDmfxDYHWK8qSiLkuJw54JQ6pXNFWsASm3P00FHJ9CEve")
STRIPE_VERSION = "2022-08-01"
STRIPE_CURRENCY = "usd"


STRIPE_SIGNING_SECRET = env.str("STRIPE_SIGNING_SECRET", "whsec_a9b996b0a13a49882ebee4dddcb66b93b38463354f3c5acefdd5abe0f691cc81")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

ALLOWED_HOSTS = env.list("HOST", default=["*"])
CORS_ALLOW_ALL_ORIGINS = True
SITE_ID = 1

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env.bool("SECURE_REDIRECT", default=False)

# Celery settings
CELERY_BROKER_URL = "redis://redis:6379"
CELERY_RESULT_BACKEND = "redis://redis:6379"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites'
]
LOCAL_APPS = [
    'home',
    'users.apps.UsersConfig',
    'project.apps.ProjectConfig',
    'gear.apps.GearConfig',
    'shoot_setup.apps.ShootSetupConfig',
    'permission.apps.PermissionConfig',
    'organisation.apps.OrganisationConfig',
    'payment.apps.PaymentConfig'
]
THIRD_PARTY_APPS = [
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'rest_auth.registration',
    'bootstrap4',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_extensions',
    'drf_yasg',
    'storages',
]
MODULES_APPS = get_modules()

INSTALLED_APPS += LOCAL_APPS + THIRD_PARTY_APPS + MODULES_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.custom_middleware.ActivityMiddleware',
]

ROOT_URLCONF = 'shiny_limit_32516.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'web_build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shiny_limit_32516.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

if env.str("DATABASE_URL", default=None):
    DATABASES = {
        'default': env.db()
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

MIDDLEWARE += ['whitenoise.middleware.WhiteNoiseMiddleware']

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
)

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), os.path.join(BASE_DIR, 'web_build/static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# allauth / users
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "users:redirect"

ACCOUNT_ADAPTER = "users.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "users.adapters.SocialAccountAdapter"
ACCOUNT_ALLOW_REGISTRATION = env.bool("ACCOUNT_ALLOW_REGISTRATION", True)
SOCIALACCOUNT_ALLOW_REGISTRATION = env.bool("SOCIALACCOUNT_ALLOW_REGISTRATION", True)

REST_AUTH_SERIALIZERS = {
    # Replace password reset serializer to fix 500 error
    "PASSWORD_RESET_SERIALIZER": "api.v1.users.serializers.PasswordSerializer",
}
REST_AUTH_REGISTER_SERIALIZERS = {
    # Use custom serializer that has no username and matches web signup
    "REGISTER_SERIALIZER": "api.v1.users.serializers.SignupSerializer",
}

# Custom user model
AUTH_USER_MODEL = "users.User"
CAMERA_MODEL = "gear.Camera"
AIR_CAMERA_MODEL = "gear.AirCamera"

SENDGRID_API_URL = 'https://api.sendgrid.com/v3/mail/send'
EMAIL_HOST = env.str("EMAIL_HOST", "smtp.sendgrid.net")
EMAIL_HOST_USER = env.str("SENDGRID_USERNAME", "apikey")
EMAIL_HOST_PASSWORD = env.str("SENDGRID_PASSWORD", "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")   
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = env.str("SENDGRID_DEFAULT_FROM_EMAIL", "no-reply@advancedimagerobotics.com")

FILE_UPLOAD_HANDLERS =[
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# AWS S3 config
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_QUERYSTRING_AUTH = False

# TF0KMC1VOUDWU5K0FRCR
# z4zIS74L63oTlP3rbICa5ZnTDhamGHcnuZ1oM7R3

# 9C4T0O8L4P4V2WPA864Y
# eUKc38UhT1brJ5zU5kAFwHKm6r0S7ujtPL6sWcd3

# client's creds below
# WASABI_AWS_ACCESS_KEY_ID = env.str("WASABI_AWS_ACCESS_KEY_ID", "0LN94UKBHRFOVLPYW6PH")
# WASABI_AWS_SECRET_ACCESS_KEY = env.str("WASABI_AWS_SECRET_ACCESS_KEY", "Sw471sCbvTmpqzgpYzAJv2ufRtaHWsL6jidEF0m3")

# 9PO151MTCCEJOJGN53NR
# uJD7D6tw5NZtHeVoeXqIzKU2jHuLaSeoARMa25ab

# AWS Wasabi Config



WASABI_PUBLIC_URL = env.str("WASABI_PUBLIC_URL", "https://s3.us-east-1.wasabisys.com/")
WASABI_ENDPOINT_URL = env.str("WASABI_ENDPOINT_URL", "https://s3.wasabisys.com")
# WASABI_AWS_ACCESS_KEY_ID = env.str("WASABI_AWS_ACCESS_KEY_ID", "BTB3NXDMO6KAD88SH3BA")
# WASABI_AWS_SECRET_ACCESS_KEY = env.str("WASABI_AWS_SECRET_ACCESS_KEY", "RkFiQaWPoT1emYTpXc5BJTkZ8ef0C4pTmPCv41oP")
WASABI_AWS_ACCESS_KEY_ID = env.str("WASABI_AWS_ACCESS_KEY_ID", "0LN94UKBHRFOVLPYW6PH")
WASABI_AWS_SECRET_ACCESS_KEY = env.str("WASABI_AWS_SECRET_ACCESS_KEY", "Sw471sCbvTmpqzgpYzAJv2ufRtaHWsL6jidEF0m3")
WASABI_AWS_STORAGE_BUCKET_NAME = env.str("WASABI_AWS_STORAGE_BUCKET_NAME", "media-air")
WASABI_AWS_STORAGE_REGION = env.str("WASABI_AWS_STORAGE_REGION", "us-east-1")
WASABI_AWS_S3_SIGNATURE_VERSION = 's3v4'
WASABI_AWS_QUERYSTRING_AUTH = False
WASABI_AWS_LIST_OBJECT_PAGE_SIZE = 5
WASABI_AWS_LIST_OBJECT_MAX_ITEMS = 5
WASABI_ASSETS_FOLDER_PATH = 'assets/'
WASABI_THUMBNAIL_FOLDER_PATH = 'thumbnail/'
WASABI_PUBLIC_URL = "https://s3.%s.wasabisys.com/%s/%s"


USE_S3 = (
    AWS_ACCESS_KEY_ID and
    AWS_SECRET_ACCESS_KEY and
    AWS_STORAGE_BUCKET_NAME and
    AWS_STORAGE_REGION
)

if USE_S3:
    AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read")
    AWS_MEDIA_LOCATION = env.str("AWS_MEDIA_LOCATION", "media")
    AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
    DEFAULT_FILE_STORAGE = env.str(
        "DEFAULT_FILE_STORAGE", "home.storage_backends.MediaStorage"
    )
    MEDIA_URL = '/mediafiles/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

# Swagger settings for api docs
SWAGGER_SETTINGS = {
    "DEFAULT_INFO": f"{ROOT_URLCONF}.api_info",
}

if DEBUG or not (EMAIL_HOST_USER and EMAIL_HOST_PASSWORD):
    # output email to console instead of sending
    if not DEBUG:
        logging.warning("You should setup `SENDGRID_USERNAME` and `SENDGRID_PASSWORD` env vars to send emails.")
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    )
}

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.TokenAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     )
# }

# 'DEFAULT_FILTER_BACKENDS': (
#         'django_filters.rest_framework.DjangoFilterBackend',
#     )